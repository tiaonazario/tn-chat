// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String

  accounts Account[]
  sessions Session[]

  chatsAsReceiver    Chat[]    @relation("userAsReceiver")
  chatsAsSender      Chat[]    @relation("userAsSender")
  messagesAsReceiver Message[] @relation("userAsReceiver")
  messagesAsSender   Message[] @relation("userAsSender")
}

model Chat {
  id         String @id @default(uuid())
  receiverId String
  senderId   String

  messagesAsReceiver Message[] @relation("chatAsReceiver")
  messagesAsSender   Message[] @relation("chatAsSender")

  receiver User @relation("userAsReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender   User @relation("userAsSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId])
  @@index([senderId])
}

model Message {
  id               String   @id @default(uuid())
  content          String
  timestamp        DateTime @default(now())
  receiverId       String
  senderId         String
  chatAsReceiverId String?
  chatAsSenderId   String?

  seenIds String[]

  receiver       User  @relation("userAsReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User  @relation("userAsSender", fields: [senderId], references: [id], onDelete: Cascade)
  chatAsReceiver Chat? @relation("chatAsReceiver", fields: [chatAsReceiverId], references: [id])
  chatAsSender   Chat? @relation("chatAsSender", fields: [chatAsSenderId], references: [id])

  @@index([receiverId])
  @@index([senderId])
  @@index([chatAsReceiverId])
  @@index([chatAsSenderId])
}
